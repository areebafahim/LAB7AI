{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cea090c4-fa22-4ce1-a496-6fa41cb68d44",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error: 24124.94\n",
      "Mean Squared Error: 643974726.23\n",
      "R-squared: 0.74\n",
      "\n",
      "Predictions vs Actual values:\n",
      "   Actual      Predicted\n",
      "8  600000  568003.475905\n",
      "1  500000  483746.634247\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Import necessary libraries\n",
    "import pandas as pd\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
    "\n",
    "# Sample data: Features include size of the house (sq ft), number of rooms, and age of the house\n",
    "data = {\n",
    "    'Size': [1500, 1800, 2400, 2200, 1600, 2100, 2500, 1900, 2300, 2000],  # in square feet\n",
    "    'Rooms': [3, 4, 3, 4, 3, 4, 5, 4, 4, 3],  # number of rooms\n",
    "    'Age': [10, 15, 20, 5, 8, 10, 30, 12, 25, 18],  # age of the house in years\n",
    "    'Price': [400000, 500000, 550000, 600000, 450000, 520000, 650000, 470000, 600000, 490000]  # house price in dollars\n",
    "}\n",
    "\n",
    "# Convert the data into a DataFrame\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Features (independent variables) and target (dependent variable)\n",
    "X = df[['Size', 'Rooms', 'Age']]  # Independent variables\n",
    "y = df['Price']  # Dependent variable (house price)\n",
    "\n",
    "# Split the dataset into training and testing sets (80% train, 20% test)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Initialize the Linear Regression model\n",
    "model = LinearRegression()\n",
    "\n",
    "# Train the model using the training data\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Make predictions on the test data\n",
    "y_pred = model.predict(X_test)\n",
    "\n",
    "# Evaluate the model's performance\n",
    "mae = mean_absolute_error(y_test, y_pred)  # Mean Absolute Error\n",
    "mse = mean_squared_error(y_test, y_pred)  # Mean Squared Error\n",
    "r2 = r2_score(y_test, y_pred)  # R-squared score\n",
    "\n",
    "# Print evaluation metrics\n",
    "print(f\"Mean Absolute Error: {mae:.2f}\")\n",
    "print(f\"Mean Squared Error: {mse:.2f}\")\n",
    "print(f\"R-squared: {r2:.2f}\")\n",
    "\n",
    "# Print predictions and actual values\n",
    "predictions = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\n",
    "print(\"\\nPredictions vs Actual values:\")\n",
    "print(predictions)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9a63ca05-6faa-4c6e-9aa8-6022a6ca198e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
